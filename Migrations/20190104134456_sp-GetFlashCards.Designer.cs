// <auto-generated />
using System;
using CoreAPI21;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreAPI21withAngular.Migrations
{
    [DbContext(typeof(DB_48034_zenosoftContext))]
    [Migration("20190104134456_sp-GetFlashCards")]
    partial class spGetFlashCards
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreAPI21.AccessSecurity", b =>
                {
                    b.Property<int>("AccessSecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessSecurityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Add");

                    b.Property<string>("Areas")
                        .HasMaxLength(500);

                    b.Property<int?>("Delete");

                    b.Property<bool?>("Edit");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.Property<bool?>("View");

                    b.HasKey("AccessSecurityId");

                    b.ToTable("AccessSecurity");
                });

            modelBuilder.Entity("CoreAPI21.ActTargets", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TargetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Idno")
                        .HasColumnName("IDNo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ObjectTable")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("TargetId");

                    b.ToTable("ActTargets");
                });

            modelBuilder.Entity("CoreAPI21.ActTypes", b =>
                {
                    b.Property<int>("ActTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Archived")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Descr")
                        .HasMaxLength(100);

                    b.Property<bool?>("Flag");

                    b.Property<bool?>("IsEvent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phase")
                        .HasMaxLength(50);

                    b.Property<string>("TargetType")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("ActTypeId");

                    b.ToTable("ActTypes");
                });

            modelBuilder.Entity("CoreAPI21.Addresses", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddrName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CoreAPI21.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CoreAPI21.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CoreAPI21.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CoreAPI21.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CoreAPI21.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoreAPI21.CanvasProjectSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrushEffect");

                    b.Property<int?>("ColorSlice");

                    b.Property<int?>("GridSquareSize");

                    b.Property<string>("Notes");

                    b.Property<int?>("PaintEffect");

                    b.Property<string>("Palette")
                        .HasMaxLength(150);

                    b.Property<int?>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.HasKey("Id");

                    b.ToTable("CanvasProjectSettings");
                });

            modelBuilder.Entity("CoreAPI21.Contacts", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Notes");

                    b.Property<string>("Praddress")
                        .HasColumnName("PRAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Premail")
                        .HasColumnName("PREmail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Prorg")
                        .HasColumnName("PROrg")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Prphone")
                        .HasColumnName("PRPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Prtitle")
                        .HasColumnName("PRTitle")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CoreAPI21.DayTime", b =>
                {
                    b.Property<int>("Dtid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DTID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DetailId");

                    b.Property<string>("HrMinSec")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<bool?>("IsPosted");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Seconds");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("StopTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Dtid");

                    b.ToTable("DayTime");
                });

            modelBuilder.Entity("CoreAPI21.Details", b =>
                {
                    b.Property<int>("Itemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITEMID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActId")
                        .HasColumnName("ActID");

                    b.Property<int?>("ActTypeId")
                        .HasColumnName("ActTypeID");

                    b.Property<int?>("ActionId")
                        .HasColumnName("ActionID");

                    b.Property<int?>("ActionTypeId")
                        .HasColumnName("ActionTypeID");

                    b.Property<DateTime?>("Added")
                        .HasColumnName("ADDED")
                        .HasColumnType("date");

                    b.Property<int?>("AttachedId")
                        .HasColumnName("AttachedID");

                    b.Property<int?>("ChangedByUserId")
                        .HasColumnName("ChangedByUserID");

                    b.Property<DateTime?>("Chrono")
                        .HasColumnName("CHRONO")
                        .HasColumnType("date");

                    b.Property<int?>("CommTypeD");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateLastChanged")
                        .HasColumnType("date");

                    b.Property<int?>("DispOrder");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<int?>("EventId")
                        .HasColumnName("EventID");

                    b.Property<int?>("HxtypeId")
                        .HasColumnName("HXTypeID");

                    b.Property<int?>("Impact");

                    b.Property<string>("Item")
                        .HasColumnName("ITEM");

                    b.Property<string>("Itemtype")
                        .HasColumnName("ITEMTYPE")
                        .HasMaxLength(30);

                    b.Property<int?>("LifeSpanDays");

                    b.Property<int?>("LifeSpanMinutes");

                    b.Property<int?>("LifeSpanSeconds");

                    b.Property<int?>("LinkedDocId")
                        .HasColumnName("LinkedDocID");

                    b.Property<int?>("LinkedImageId")
                        .HasColumnName("LinkedImageID");

                    b.Property<int?>("LinkedPersonId")
                        .HasColumnName("LinkedPersonID");

                    b.Property<int?>("LinkedRtfid")
                        .HasColumnName("LinkedRTFID");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<int?>("Number1");

                    b.Property<int?>("Number2");

                    b.Property<string>("Number3")
                        .HasMaxLength(10);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("SecurityTypeId")
                        .HasColumnName("SecurityTypeID");

                    b.Property<string>("Source")
                        .HasColumnName("SOURCE");

                    b.Property<string>("Statement")
                        .HasColumnName("STATEMENT");

                    b.Property<string>("Txt1");

                    b.Property<string>("Txt2");

                    b.Property<string>("Txt3");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Itemid");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("CoreAPI21.Docs2", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BegBates")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Descr");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<string>("EndBates")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .HasMaxLength(50);

                    b.Property<string>("FileType")
                        .HasMaxLength(10);

                    b.Property<string>("FullText");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("Pages");

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.HasKey("DocId");

                    b.ToTable("DOCS2");
                });

            modelBuilder.Entity("CoreAPI21.DocTypes", b =>
                {
                    b.Property<int>("DocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeKey")
                        .HasMaxLength(3);

                    b.Property<string>("TypeName")
                        .HasMaxLength(20);

                    b.HasKey("DocTypeId");

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("CoreAPI21.Documents", b =>
                {
                    b.Property<int>("DocId")
                        .HasColumnName("DocID");

                    b.Property<string>("Authors")
                        .HasMaxLength(250);

                    b.Property<string>("BegBates")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime");

                    b.Property<string>("CopyTo")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<string>("EndBates")
                        .HasMaxLength(50);

                    b.Property<string>("FileAddress")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasMaxLength(50);

                    b.Property<string>("Fullname")
                        .HasMaxLength(250);

                    b.Property<string>("KeyName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Links");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<string>("Object")
                        .HasMaxLength(25);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("Pages");

                    b.Property<string>("Receivers")
                        .HasMaxLength(250);

                    b.Property<string>("Source")
                        .HasMaxLength(250);

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.Property<string>("Text");

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.HasKey("DocId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CoreAPI21.Domains", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DomainID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("DomainId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("CoreAPI21.EmailMsgs", b =>
                {
                    b.Property<int>("EmailMsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMailMsgID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachAddrs")
                        .IsUnicode(false);

                    b.Property<string>("AttachIds")
                        .HasColumnName("AttachIDs")
                        .IsUnicode(false);

                    b.Property<string>("AttachNames")
                        .IsUnicode(false);

                    b.Property<string>("Bcaddrs")
                        .HasColumnName("BCAddrs")
                        .IsUnicode(false);

                    b.Property<string>("Bcids")
                        .HasColumnName("BCIDs")
                        .IsUnicode(false);

                    b.Property<string>("Bcnames")
                        .HasColumnName("BCNames")
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .IsUnicode(false);

                    b.Property<string>("BodyPrev")
                        .HasMaxLength(600);

                    b.Property<string>("Ccaddrs")
                        .HasColumnName("CCAddrs")
                        .IsUnicode(false);

                    b.Property<string>("Ccids")
                        .HasColumnName("CCIDs")
                        .IsUnicode(false);

                    b.Property<string>("Ccnames")
                        .HasColumnName("CCNames")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("FromAddr")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FromId")
                        .HasColumnName("FromID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FromName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("MsgId")
                        .HasColumnName("MsgID");

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.Property<string>("Subject")
                        .IsUnicode(false);

                    b.Property<string>("ToAddrs")
                        .IsUnicode(false);

                    b.Property<string>("ToIds")
                        .HasColumnName("ToIDs")
                        .IsUnicode(false);

                    b.Property<string>("ToNames")
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.HasKey("EmailMsgId");

                    b.ToTable("EmailMsgs");
                });

            modelBuilder.Entity("CoreAPI21.Emails", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmailName")
                        .HasMaxLength(50);

                    b.HasKey("EmailId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("CoreAPI21.Entities", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormalName")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Notes");

                    b.Property<string>("Praddress")
                        .HasColumnName("PRAddress")
                        .HasMaxLength(250);

                    b.Property<string>("Prcity")
                        .HasColumnName("PRCity")
                        .HasMaxLength(50);

                    b.Property<string>("Prcountry")
                        .HasColumnName("PRCountry")
                        .HasMaxLength(50);

                    b.Property<string>("Premail")
                        .HasColumnName("PREmail")
                        .HasMaxLength(50);

                    b.Property<string>("Prphone")
                        .HasColumnName("PRPhone")
                        .HasMaxLength(25);

                    b.Property<string>("PrpostalCode")
                        .HasColumnName("PRPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("Prregion")
                        .HasColumnName("PRRegion")
                        .HasMaxLength(50);

                    b.HasKey("EntityId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("CoreAPI21.FlashCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnName("answer");

                    b.Property<bool?>("Answered")
                        .HasColumnName("answered");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasMaxLength(250);

                    b.Property<string>("Question")
                        .HasColumnName("question");

                    b.HasKey("Id");

                    b.ToTable("FlashCards");
                });

            modelBuilder.Entity("CoreAPI21.Groups", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("GroupType")
                        .HasMaxLength(100);

                    b.Property<string>("Testcolumn")
                        .HasColumnName("testcolumn")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CoreAPI21.Items", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActId")
                        .HasColumnName("ActID");

                    b.Property<DateTime?>("Added")
                        .HasColumnType("datetime");

                    b.Property<int?>("BegLine");

                    b.Property<int?>("BegPage");

                    b.Property<DateTime?>("Chrono")
                        .HasColumnType("datetime");

                    b.Property<string>("Disporder")
                        .HasMaxLength(10);

                    b.Property<string>("Disporder2")
                        .HasMaxLength(10);

                    b.Property<string>("Disporder3")
                        .HasMaxLength(10);

                    b.Property<int?>("DocId")
                        .HasColumnName("DocID");

                    b.Property<int?>("DocTypeId")
                        .HasColumnName("DocTypeID");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<int?>("EndLine");

                    b.Property<int?>("EndPage");

                    b.Property<string>("Item");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Links");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<int?>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<string>("Source")
                        .HasMaxLength(250);

                    b.Property<string>("Statement");

                    b.Property<int?>("StatusId")
                        .HasColumnName("StatusID");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CoreAPI21.ItemStatusTypes", b =>
                {
                    b.Property<int>("ItemStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemStatusTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemStatusTypeDispOrder");

                    b.Property<string>("ItemStatusTypeName")
                        .HasMaxLength(10);

                    b.HasKey("ItemStatusTypeId");

                    b.ToTable("ItemStatusTypes");
                });

            modelBuilder.Entity("CoreAPI21.ItemTypes", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemType")
                        .HasMaxLength(40);

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("CoreAPI21.Locations", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Office")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("Region")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CoreAPI21.Matters", b =>
                {
                    b.Property<int>("MatterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MatterID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Archived")
                        .HasColumnType("datetime");

                    b.Property<string>("ClientNo")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<bool?>("Flag");

                    b.Property<string>("FullName")
                        .HasMaxLength(400);

                    b.Property<bool?>("IsArchived");

                    b.Property<bool?>("IsPrivate");

                    b.Property<string>("MatterNo")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.Property<int?>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.Property<string>("Type")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("MatterId");

                    b.ToTable("Matters");
                });

            modelBuilder.Entity("CoreAPI21.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired();

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("CoreAPI21.MyEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .HasColumnName("fname");

                    b.Property<string>("Lname")
                        .HasColumnName("lname");

                    b.HasKey("Id");

                    b.ToTable("MyEntities");
                });

            modelBuilder.Entity("CoreAPI21.PaletteColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorMix");

                    b.Property<string>("Rgb")
                        .HasColumnName("RGB");

                    b.HasKey("Id");

                    b.ToTable("PaletteColor");
                });

            modelBuilder.Entity("CoreAPI21.PaletteColorTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorMix");

                    b.Property<string>("Rgb")
                        .HasColumnName("RGB");

                    b.HasKey("Id");

                    b.ToTable("PaletteColorTest");
                });

            modelBuilder.Entity("CoreAPI21.Persons", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("FormalName")
                        .HasMaxLength(100);

                    b.Property<string>("KeyName")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Notes");

                    b.Property<string>("Praddress")
                        .HasColumnName("PRAddress")
                        .HasMaxLength(250);

                    b.Property<string>("Prcity")
                        .HasColumnName("PRCity")
                        .HasMaxLength(50);

                    b.Property<string>("Prcountry")
                        .HasColumnName("PRCountry")
                        .HasMaxLength(50);

                    b.Property<string>("Premail")
                        .HasColumnName("PREmail")
                        .HasMaxLength(50);

                    b.Property<string>("Prentity")
                        .HasColumnName("PREntity")
                        .HasMaxLength(50);

                    b.Property<string>("Prphone")
                        .HasColumnName("PRPhone")
                        .HasMaxLength(25);

                    b.Property<string>("PrpostalCode")
                        .HasColumnName("PRPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("Prregion")
                        .HasColumnName("PRRegion")
                        .HasMaxLength(50);

                    b.Property<string>("Prtitle")
                        .HasColumnName("PRTitle")
                        .HasMaxLength(50);

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("CoreAPI21.Phones", b =>
                {
                    b.Property<int>("PhonesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhonesID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneName")
                        .HasMaxLength(50);

                    b.HasKey("PhonesId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("CoreAPI21.Points", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PointID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DispOrder");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<int?>("Index1");

                    b.Property<int?>("Index2");

                    b.Property<int?>("Index3");

                    b.Property<int?>("Level");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<string>("Point");

                    b.Property<string>("WriteUp");

                    b.HasKey("PointId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("CoreAPI21.Relations", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LinkID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DispOrder");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPrimary");

                    b.Property<int?>("LeftId")
                        .HasColumnName("LeftID");

                    b.Property<string>("LeftInfo")
                        .HasMaxLength(50);

                    b.Property<string>("LeftName")
                        .HasMaxLength(50);

                    b.Property<string>("LeftType")
                        .HasMaxLength(3);

                    b.Property<string>("LinkName")
                        .HasMaxLength(50);

                    b.Property<int?>("RightId")
                        .HasColumnName("RightID");

                    b.Property<string>("RightInfo")
                        .HasMaxLength(50);

                    b.Property<string>("RightName")
                        .HasMaxLength(50);

                    b.Property<string>("RightType")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UseOnce");

                    b.HasKey("LinkId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("CoreAPI21.Statements", b =>
                {
                    b.Property<int>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActId")
                        .HasColumnName("ActID");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<int?>("PointId")
                        .HasColumnName("PointID");

                    b.Property<string>("Statement")
                        .IsRequired();

                    b.Property<int?>("StepId")
                        .HasColumnName("StepID");

                    b.Property<int?>("XtractId")
                        .HasColumnName("XtractID");

                    b.HasKey("StatementId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("CoreAPI21.StatusTypes", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DispOrder");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(100);

                    b.Property<string>("StatusType")
                        .HasMaxLength(100);

                    b.HasKey("StatusId");

                    b.ToTable("StatusTypes");
                });

            modelBuilder.Entity("CoreAPI21.StepCats", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CatID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatName")
                        .HasMaxLength(20);

                    b.Property<int?>("DispOrder");

                    b.HasKey("CatId");

                    b.ToTable("StepCats");
                });

            modelBuilder.Entity("CoreAPI21.Steps", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StepID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accrued")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<int?>("ActId")
                        .HasColumnName("ActID");

                    b.Property<bool?>("Active");

                    b.Property<string>("Actor")
                        .HasMaxLength(15);

                    b.Property<int?>("ActorId")
                        .HasColumnName("ActorID");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Category")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Chain");

                    b.Property<int?>("DispOrder");

                    b.Property<DateTime?>("GoDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LinkId")
                        .HasColumnName("LinkID");

                    b.Property<string>("Object")
                        .HasMaxLength(100);

                    b.Property<int?>("ObjectId")
                        .HasColumnName("ObjectID");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Ref")
                        .HasMaxLength(100);

                    b.Property<int?>("Sequence");

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.Property<string>("StepName")
                        .HasMaxLength(45);

                    b.Property<DateTime?>("StopDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Text");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("StepId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("CoreAPI21.Steps2", b =>
                {
                    b.Property<int>("StepId")
                        .HasColumnName("StepID");

                    b.Property<string>("Accrued")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<int?>("ActId")
                        .HasColumnName("ActID");

                    b.Property<int?>("ActorId")
                        .HasColumnName("ActorID");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Category")
                        .HasMaxLength(10);

                    b.Property<int?>("Chain");

                    b.Property<string>("Descr");

                    b.Property<int?>("LinkId")
                        .HasColumnName("LinkID");

                    b.Property<int?>("ObjTypeId")
                        .HasColumnName("ObjTypeID");

                    b.Property<int?>("Sequence");

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.Property<int?>("StepTypeId")
                        .HasColumnName("StepTypeID");

                    b.HasKey("StepId");

                    b.ToTable("Steps2");
                });

            modelBuilder.Entity("CoreAPI21.StepTypes", b =>
                {
                    b.Property<int>("DetailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DetailTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatType")
                        .HasMaxLength(20);

                    b.Property<string>("DetailType")
                        .HasMaxLength(15);

                    b.HasKey("DetailTypeId");

                    b.ToTable("StepTypes");
                });

            modelBuilder.Entity("CoreAPI21.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TimeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActId")
                        .HasColumnName("ActID");

                    b.Property<string>("ClientNo")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DateGroupBy")
                        .HasMaxLength(10);

                    b.Property<string>("Descr");

                    b.Property<bool?>("Flag");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<int?>("MatterId")
                        .HasColumnName("MatterID");

                    b.Property<string>("MatterNo")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PostNo");

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.Property<string>("Type")
                        .HasMaxLength(1);

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("TimeId");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("CoreAPI21.Times", b =>
                {
                    b.Property<int>("TimeTxtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TimeTxtID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TimeText")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TimeTxtId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("CoreAPI21.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AspNetUserId")
                        .HasColumnName("AspNetUserID");

                    b.Property<int?>("ContactId")
                        .HasColumnName("ContactID");

                    b.Property<int?>("DomainId")
                        .HasColumnName("DomainID");

                    b.Property<string>("KeyName")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Prrole")
                        .HasColumnName("PRRole")
                        .HasMaxLength(15);

                    b.Property<int?>("Security");

                    b.Property<int?>("SettingsId")
                        .HasColumnName("SettingsID");

                    b.Property<int?>("Utcsetoff")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UTCSetoff")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoreAPI21.AspNetUserClaims", b =>
                {
                    b.HasOne("CoreAPI21.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreAPI21.AspNetUserLogins", b =>
                {
                    b.HasOne("CoreAPI21.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreAPI21.AspNetUserRoles", b =>
                {
                    b.HasOne("CoreAPI21.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreAPI21.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
